extends ./xml.jade
include ./mixins/attrTags.jade

mixin valTag(tag, val)
  - var tagMap = {size: 'sz'}
  #{tagMap[tag] || tag}(val=val)/

block content
  styleSheet(mc:Ignorable='x14ac')&attributes(namespaces)
    numFmts(count=numberFormats.length)
      each locale, n in numberFormats
        numFmt(numFmtId=200 + n, formatCode!=locale.format)
    fonts(count=fonts.length, "x14ac:knownFonts"="1")
      each font, o in fonts
        font
          +attrTags(font)
          each tag in ['name', 'size', 'scheme', 'family']
            if (font[tag])
              +valTag(tag, font[tag])
          if font.color
            color/&attributes(font.color)
          if font.subscript || font.superscript
            vertAlign(val=font.subscript ? 'subscript' : 'superscript')/

    fills(count=fills.length)
      each fill, l in fills
        fill
          if (fill.type === 'pattern')
            patternFill(patternType=fill.pattern||'solid')
              if fill.pattern === 'solid' || fill.color
                fgColor/&attributes(fill.fgColor || fill.color)
              if fill.bgColor
                bgColor/&attributes(fill.bgColor)
          if (fill.type === 'gradient')
            gradientFill&attributes()
    borders(count=borders.length)
      each border, r in borders
        if !border || Object.keys(border).length === 1
          border/
        else
          border
            if border.left
              left(style=border.left.style)
                if border.left.color
                  color/&attributes(border.left.color)
            else
              left/
            if border.right
              right(style=border.right.style)
                if border.right.color
                  color/&attributes(border.right.color)
            else
              right/
            if border.top
              top(style=border.top.style)
                if border.top.color
                  color/&attributes(border.top.color)
            else
              top/
            if border.bottom
              bottom(style=border.bottom.style)
                if border.bottom.color
                  color/&attributes(border.bottom.color)
            else
              bottom/
            if border.diagonal
              diagonal(style=border.diagonal.style)
                if border.diagonal.color
                  color/&attributes(border.diagonal.color)
            else
              diagonal/
    cellStyleXfs(count="1")
      xf(borderId="0" fillId="0" fontId="0" numFmtId="0")/
    cellXfs(count=cellStyles.length)
      each style, t in cellStyles
        - var fontId = ('font' in style && style.font) || 0
        - var fillId = ('fill' in style && style.fill) || 0
        - var borderId = ('border' in style && style.border) || 0
        - var numberFormat = ('numberFormat' in style && (style.numberFormat + 200)) || 0
        if !style || Object.keys(style).length === 1
          xf/
        else
          xf(
            applyBorder = borderId && 1 || void 0,
            applyFill = fillId && 1 || void 0,
            applyNumberFormat = numberFormat && 1 || void 0,
            borderId = borderId,
            fillId =  fillId,
            fontId = fontId,
            numFmtId = numberFormat,
            xfId=0
          )
            if style.alignment
              alignment/&attributes(style.alignment)
    cellStyles(count="1")
      cellStyle(builtinId="0", name="Normal", xfId="0")/
    dxfs(count="0")/
    tableStyles(count="0", defaultPivotStyle="PivotStyleMedium4", defaultTableStyle="TableStyleMedium9")/
